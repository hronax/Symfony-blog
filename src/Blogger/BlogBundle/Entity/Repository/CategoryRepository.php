<?php

namespace Blogger\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    public function getCategoriesList($withEmpty = false)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c', 'p')
            ->leftJoin('c.posts', 'p')
            ->addOrderBy('c.name', 'ASC');
            if(!$withEmpty)
                $qb->where('p.posted = 1');

        return $qb->getQuery()
            ->getResult();
    }

    public function getDefaultCategory() {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.id = 1');

        return $qb->getQuery()
            ->getOneOrNullResult();
    }

    public function isCategorySlugUnique($slug) {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.slug = :slug')
            ->setParameter('slug', $slug);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findBySlug($slug) {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.slug = :slug')
            ->setParameter('slug', $slug);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getCategoriesTree() {
        $categories = $this->getCategoriesList();
        $offsets = array();
        foreach($categories as $category)
            $offsets[$category->getId()] = -1;

        $tree = $this->buildTree($categories, $offsets);

        $treeWithOffsets = array();
        foreach ($tree as $category) {
            $treeWithOffsets[] = array (
                'category' => $category,
                'offset' => $offsets[$category->getId()]
            );
        }

        return $treeWithOffsets;
    }

    public function buildTree($elements, &$offsets, $parentId = -1) {
        $tree = array();

        foreach ($elements as $element) {
            $offsets[$element->getId()]++;
            if (!$element->getParent() || ($element->getParent() && ($element->getParent()->getId() == $parentId))) {
                $tree[] = $element;
                if($element->getChildren()) {
                    $tree = array_merge($tree, $this->buildTree($element->getChildren(), $offsets, $element->getId()));
                }
            }
        }
        return $tree;
    }

    public function getChildCategories($id) {
        $category = $this->find($id);

        return $this->findChildren($category);
    }

    public function findChildren($category) {
        $categories = array();
        $categories[] = $category->getId();
        if($category->getChildren()) {
            foreach($category->getChildren() as $child) {
                $categories = array_merge($categories, $this->findChildren($child));
            }
        }
        return $categories;
    }

    public function recountPostCountForAllCategories() {
        $categories = $this->getCategoriesList();

        foreach ($categories as $category) {
            $em = $this->getEntityManager();
            $category->setPostCount($em->getRepository('BloggerBlogBundle:Post')->getPostCountInCategory($category));
        }
    }
}