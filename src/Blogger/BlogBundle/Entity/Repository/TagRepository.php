<?php

namespace Blogger\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends EntityRepository
{
    public function getTagList()
    {
        $qb = $this->createQueryBuilder('t')
            ->select('t, b')
            ->leftJoin('t.blogs', 'b')
            ->addOrderBy('t.name', 'ASC');

        return $qb->getQuery()
            ->getResult();
    }

    public function geTagListWithBlogs() {
        $qb = $this->createQueryBuilder('t')
            ->select('t', 'b')
            ->innerJoin('t.blogs', 'b')
            ->where('b.posted = 1')
            ->addOrderBy('t.name', 'ASC');

        return $qb->getQuery()
            ->getResult();
    }

    public function isTagUnique($name, $slug) {
        $qb = $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.slug = :slug')
            ->orWhere('t.name = :name')
            ->setParameters(
                array(
                    'slug' => $slug,
                    'name' => $name
                )
            );
        if($qb->getQuery()->getResult())
            return false;
        else
            return true;
    }

    public function getTagWeights()
    {
        $tags = $this->geTagListWithBlogs();
        if (empty($tags))
            return $tags;

        // Shuffle the tags
        shuffle($tags);
        $max = 0;
        $min = 10000000;

        foreach($tags as $tag) {
            $blogCount = $tag->getBlogCount();
            if($blogCount < $min)
                $min = $blogCount;
            if($blogCount > $max)
                $max = $blogCount;
        }

        foreach($tags as $tag) {
            $blogCount = $tag->getBlogCount();
            $maxFont = 24;
            $minFont = 12;
            $weight = ($blogCount-$min+1) / ($max-$min+1) * ($maxFont - $minFont) + $minFont;
            $tag->setWeight($weight);
        }

        return $tags;
    }

    public function findOneByName($name) {
        $qb = $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.name = :name')
            ->setParameter('name', $name);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findBySlug($slug) {
        $qb = $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.slug = :slug')
            ->setParameter('slug', $slug);
        return $qb->getQuery()->getOneOrNullResult();
    }
}